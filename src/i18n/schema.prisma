datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  key        String           @unique
  permission ApiKeyPermission @default(READ_ONLY)

  // Relations
  projectVersionId Int            @map("project_version_id")
  projectVersion   ProjectVersion @relation(fields: [projectVersionId], references: [id], onDelete: Cascade)

  @@map("api_key")
}

model I18nKey {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  name String

  // Relations
  i18nNamespaceId Int           @map("i18n_namespace_id")
  i18nNamespace   I18nNamespace @relation(fields: [i18nNamespaceId], references: [id], onDelete: Cascade)
  i18nValues      I18nValue[]

  @@unique([i18nNamespaceId, name])
  @@map("i18n_key")
}

model I18nNamespace {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  name String

  // Relations
  children         I18nNamespace[] @relation("hierarchy")
  i18nkeys         I18nKey[]
  projectVersionId Int             @map("project_version_id")
  projectVersion   ProjectVersion  @relation(fields: [projectVersionId], references: [id], onDelete: Cascade)
  parentId         Int?            @map("parent_id")
  parent           I18nNamespace?  @relation("hierarchy", fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([projectVersionId, name])
  @@map("i18n_namespace")
}

model I18nValue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  value String

  // Relations
  i18nKeyId         Int             @map("i18n_key_id")
  i18nKey           I18nKey         @relation(fields: [i18nKeyId], references: [id], onDelete: Cascade)
  projectLanguageId Int             @map("project_language_id")
  projectLanguage   ProjectLanguage @relation(fields: [projectLanguageId], references: [id], onDelete: Cascade)

  @@unique([i18nKeyId, projectLanguageId])
  @@map("i18n_value")
}

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  description String?
  name        String

  // Relations
  projectUsers            ProjectUser[]
  projectVersions         ProjectVersion[]
  currentProjectVersionId Int?             @map("current_project_version_id")
  currentProjectVersion   ProjectVersion?  @relation("current_project_version", fields: [currentProjectVersionId], references: [id], onDelete: SetNull)
  projectHistories        ProjectHistory[]

  @@map("project")
}

model ProjectHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  details Json
  kind    ProjectHistoryKind

  // Relations
  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_history")
}

model ProjectLanguage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  code     String
  isSource Boolean @default(false) @map("is_source")
  position Int     @default(0)

  // Relations
  projectVersionId Int            @map("project_version_id")
  projectVersion   ProjectVersion @relation(fields: [projectVersionId], references: [id], onDelete: Cascade)
  i18nValues       I18nValue[]

  @@unique([projectVersionId, code])
  @@unique([projectVersionId, position])
  @@map("project_language")
}

model ProjectUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  role ProjectUserRole @default(USER)

  // Relations
  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_user")
}

model ProjectVersion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  description String?
  version     Int     @default(1)

  // Relations
  apiKeys                 ApiKey[]
  currentProject          Project[]               @relation("current_project_version")
  i18nNamespaces          I18nNamespace[]
  projectId               Int                     @map("project_id")
  project                 Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectLanguages        ProjectLanguage[]
  projectVersionHistories ProjectVersionHistory[]

  @@map("project_version")
}

model ProjectVersionHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  details Json
  kind    ProjectVersionHistoryKind

  // Relations
  projectVersionId Int            @map("project_version_id")
  projectVersion   ProjectVersion @relation(fields: [projectVersionId], references: [id], onDelete: Cascade)

  @@map("project_version_history")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  provider    AuthProvider
  displayName String       @map("display_name")
  email       String?
  imageUrl    String?      @map("image_url")
  refId       String       @unique @map("ref_id")
  role        UserRole     @default(USER)

  // Relations
  projectUsers ProjectUser[]

  @@map("user")
}

enum ApiKeyPermission {
  READ_ONLY
  READ_WRITE
}

enum AuthProvider {
  GOOGLE
  DISCORD
  GITHUB
}

enum ProjectHistoryKind {
  ADD_USER
  CREATE
  CREATE_VERSION
  DROP_USER
  UPDATE_NAME
  UPDATE_DESCRIPTION
  UPDATE_CURRENT_VERSION
  UPDATE_USER_ROLE
}

enum ProjectUserRole {
  OWNER
  USER
  VIEWER
}

enum ProjectVersionHistoryKind {
  ADD_LANGUAGE
  CREATE
  CREATE_API_KEY
  DELETE_API_KEY
  DELETE_LANGUAGE
  REGENERATE_API_KEY
  UPDATE_API_KEY_PERMISSION
  UPDATE_LANGUAGE_CODE
  UPDATE_LANGUAGE_POSITION
  UPDATE_SOURCE_LANGUAGE
}

enum UserRole {
  OWNER
  ADMIN
  USER
}
